/**
 * 链表：链表在逻辑结构上是一个挨着一个的数据，在实际存储时，并没有像顺序表（数组）那样也相互挨着。恰恰相反，数据随机分布在内存中的各个位置，这种存储结构称为线性表的链式存储。
 *
 * 链表存储有序的元素集合，但是和数组不同的是，链表中的元素在内存中的存储并不是连续的。每一个链表元素都包含了一个存储元素本身的节点和一个指向下一个元素的引用。
 *
 * 每个元素本身由两个部分组成：
 *    - 数据域：本身存储的信息
 *    - 指针域：指向直接后继的指针
 *
 *     ————————————        ————————————
 *     | 4 | next |  ——>   | 6 | next | ——>    next存储的为6这个node的索引，并不是值
 *     ————————————        ————————————
 *
 * 链表的特点：
 *    - 空间上不是连续的，链表更像是锁链，一环扣一环
 *    - 存放的一个值，都要多开销一个引用空间
 *
 * 优缺点：
 *  - 优点
 *    - 只要内存足够大，就能存的下，不用担心空间碎片的问题
 *    - 链表的添加和删除非常容易操作，时间复杂度为O（1）
 *    - 大小不固定，拓展很灵活
 *  - 缺点
 *    - 查询速度比较慢（查询某一个位置的数据）：链表是通过指针将零散的内存块串联起来的，所以链表不支持随机访问，如果要找特定的项，只能从头开始遍历，之道找到某个项，所以访问的时间复杂度是O（n）
 *    - 链表每一个节点都需要创建一个指向next的引用，会浪费一些空间
 *
 * 链表的实现：
 *  - append(element)：向链表尾部添加一个新元素，要注意的是链表是无序的。
 *  - insert(element)：在链表指定位置插入一个新元素。
 *  - remove(element)：从链表中移除一项
 *  - indexOf(element)：返回该元素在链表中的索引，如果链表中没有该元素就返回-1
 *  - removeAt(position)：从链表的指定位置移除元素
 *  - isEmpty：判断链表是否为空
 *  - size：返回链表包含的元素个数
 *  - toString：返回链表元素的字符串值
 *
 * https://www.yuque.com/docs/share/c762ca6e-f8b1-4039-8ae5-cc014b0e6bc3?# 《1、链表》
 */

// 生成链表
function Node(value) {
  this.value = value;
  this.next = null;
}

const a = new Node(1);
const b = new Node(2);
const c = new Node(3);
const d = new Node(4);

a.next = b;
b.next = c;
c.next = d;

console.log(a.value); // 1
console.log(a.next.value); // 2
console.log(a.next.next.value); // 3
console.log(a.next.next.next.value); // 4
