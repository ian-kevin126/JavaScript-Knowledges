/*
* bubbleSort（冒泡排序）
* 平均时间复杂度: O(n2)
* 最坏时间复杂度: O(n2)
* 最好时间复杂度: O(n)
* 空间复杂度: O(1)
* 是否稳定: 稳定
* */

let bubbleSort = arr => {
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        let temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
  return arr;
};
// 改进思路一：设置一标志flag，当一趟遍历过程中发生元素交换时改变flag值，而某趟当flag值没有改变，则代表数组已经有序，无需再继续排序。
// 改进思路二： 设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。
// 改进思路三：传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。
