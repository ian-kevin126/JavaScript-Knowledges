/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
  const m = graph.length;
  const set = new DisjointSet(m);
  for (let i = 0; i < m; i++) {
    for (let j = 0; j < m; j++) {
      if (graph[i][j] === 1 && i !== j) {
        set.union(set.find(i), set.find(j));
      }
    }
  }
  const nInfected = {};
  for (const i of initial) {
    const r = set.find(i);
    nInfected[r] = (nInfected[r] || 0) + 1;
  }
  initial.sort((a, b) => a - b);
  let j = initial[0];
  for (const i of initial) {
    const ri = set.find(i);
    const rj = set.find(j);
    if (nInfected[ri] === 1 && set.sizes[ri] > set.sizes[rj]) {
      j = i;
    }
  }
  return j;
};

class DisjointSet {
  constructor(length) {
    this.roots = [...new Array(length)].map((_, i) => i);
    this.sizes = new Array(length).fill(1);
  }

  find(r) {
    let ptr = r;
    while (this.roots[ptr] !== ptr) {
      ptr = this.roots[ptr];
    }
    return ptr;
  }

  union(r1, r2) {
    this.roots[r2] = r1;
    this.sizes[r1] += this.sizes[r2];
  }
}
