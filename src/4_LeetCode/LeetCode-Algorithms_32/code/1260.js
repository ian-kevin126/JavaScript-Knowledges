const shiftGrid = (grid, k) => {
  const row = grid.length;
  const col = grid[0].length;
  const sr = Math.floor(k / col) % row;
  const sc = k % col;
  let step = 0;

  if (k === 0 || row * col === k) return grid;

  for (let i = 0; i < row; ++i) {
    for (let j = 0; j < col; ++j) {
      if (step === row * col) return grid;
      let ni = pi = i;
      let nj = pj = j;
      let pv = grid[i][j];
      do {
        ++step;
        ni += sr;
        nj += sc;
        if (nj >= col) { nj -= col; ++ni; }
        ni %= row;
        const swap = grid[ni][nj];
        grid[ni][nj] = pv;
        pv = swap;
        pi = ni;
        pj = nj;
      } while (ni !== i || nj !== j);
    }
  }

  return grid;
};

[
  [[[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], 4],
  [[[1,2,3],[4,5,6],[7,8,9]], 1],
  [[[1,2,3],[4,5,6],[7,8,9]], 7],
  [[[1]], 100],
  [[[-11,108,-377,-173,-960,191,-896,596,-437,-508,-433,646,966,-977,-626,-843,-811,258,-734,-211,312,138,-853,951,-54,122,599,180,678,-5,22,-413,-387,-517],[628,322,95,-650,-998,714,179,927,-226,-579,593,357,-328,671,-557,-257,-890,-455,885,-4,596,727,-599,445,-475,296,716,330,807,810,-810,637,454,238],[245,-798,-857,-651,-888,-326,-372,821,251,-154,-644,139,-986,-681,-997,-595,428,971,829,-118,-540,-332,-610,159,333,659,-25,-867,-137,448,-787,498,-771,-319],[-326,235,-38,806,673,-759,-835,-289,597,-604,186,-542,999,-707,828,892,-432,-874,-163,-688,331,268,148,-59,-436,-291,746,-147,816,874,188,-377,608,-123],[-983,-97,781,-498,-391,499,9,54,-695,-512,119,-559,-37,948,650,-380,-610,-991,-716,-729,-3,600,-55,191,-457,857,61,155,-261,568,626,922,-850,-34],[374,58,835,-801,297,400,482,-673,-822,-470,-675,-561,381,362,-729,-292,-738,15,-885,834,82,-335,154,892,-672,-74,-2,178,252,67,870,133,-778,-414],[-26,139,883,-167,968,283,944,-318,-645,529,957,713,-37,854,822,-814,-743,-99,247,198,-201,991,904,-175,-720,965,-772,430,910,545,-910,468,-630,-899],[-206,-215,337,-551,-979,856,339,-218,-580,215,-57,297,-2,-337,910,720,486,-38,670,16,193,-891,849,-832,64,176,256,896,287,-713,106,798,-572,-122],[542,473,148,984,904,-157,753,894,546,-689,-630,-584,224,700,-807,-442,259,-825,816,318,-242,-979,-989,867,809,245,-451,-882,968,-342,159,291,808,482],[-267,-118,262,-815,-138,773,-14,-492,-747,-942,146,-936,-3,-501,536,-587,407,86,-306,-293,-23,-847,380,-598,2,-979,-2,105,314,942,-532,87,739,-311],[859,975,-945,-872,-1000,-969,-155,886,747,202,599,266,-918,861,625,-960,566,879,998,-443,-833,308,-16,-758,330,959,983,22,-40,-49,-221,-109,16,-427],[-929,-993,237,905,-575,942,483,612,143,695,184,-956,241,102,-884,-17,361,557,-238,578,-393,601,-780,537,446,-728,-268,-682,-171,-786,-149,-961,-156,-14],[987,349,-994,658,542,-665,-362,777,-335,-844,-790,247,196,515,867,357,762,-880,301,-27,125,-890,-696,-563,-823,400,-805,-513,-306,96,555,-451,-875,-957],[-843,-711,-440,479,-946,805,-890,563,-56,438,447,-713,-971,-909,-356,-235,-617,653,-982,761,21,551,-253,-11,-854,-380,13,-792,690,310,-834,547,-684,-630]], 32]
].forEach(data => {
  console.log(JSON.stringify(Reflect.apply(shiftGrid, null, data)));
});
